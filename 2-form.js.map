{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["const formData = { email: \"\", message: \"\" }\n\nconst form = document.querySelector('.feedback-form')\n\n// Функція, яка перевіряє наявність збережених даних у localStorage і, якщо вони є, заповнює форму.\nconst populateForm = () => {\n\n  // Отримуємо дані з localStorage під ключем \"feedback-form-state\".\n  const savedData = localStorage.getItem(\"feedback-form-state\")\n\n  if (savedData) {\n    const parsedData = JSON.parse(savedData) // Отримуємо дані з localStorage\n    formData.email = parsedData.email || \"\"; // Оновлюємо тільки значення полів\n    formData.message = parsedData.message || \"\"; \n    // console.log(formData);\n    \n    // Заповнюємо поля форми збереженими даними.\n    // Якщо дані відсутні, залишаємо порожнім відповідне поле.\n    form.elements.email.value = formData.email || \"\";\n    form.elements.message.value = formData.message || \"\";\n  }\n}\n\n//Обробник події для відстеження змін у формі (подія 'input').\nconst handleFormInput = event => {\n\n  // Отримуємо ім'я (name) та значення (value) поля, яке було змінено.\n  const { name, value } = event.target;\n\n  // Оновлюємо відповідне поле в об'єкті formData значенням, яке ввів користувач.\n  formData[name] = value.trim(); // Обрізаємо зайві пробіли з початку і кінця рядка.\n\n  // Зберігаємо актуальний стан форми в localStorage під ключем \"feedback-form-state\".\n  localStorage.setItem(\"feedback-form-state\", JSON.stringify(formData))\n}\n\n\n\n// Обробник події відправлення форми (подія 'submit').\nconst handleFormSubmit = event => {\n\n  event.preventDefault(); // Забороняємо стандартну відправку форми\n\n  // Перевіряємо, чи заповнені обидва поля (email та message).\n  // Якщо якесь поле порожнє, показуємо сповіщення користувачу.\n  if (!formData.email || !formData.message) {\n    alert(\"Fill please all fields\"); // Сповіщення, що необхідно заповнити всі поля.\n    return;\n  }\n  // Якщо обидва поля заповнені, виводимо об'єкт formData з актуальними значеннями у консоль.\n  console.log(formData);\n  \n  // Очищаємо локальне сховище, видаляючи дані, збережені під ключем \"feedback-form-state\".\n  localStorage.removeItem(\"feedback-form-state\")\n\n  // Скидаємо об'єкт formData до початкового стану з порожніми полями.\n  formData.email = \"\";\n  formData.message = \"\";\n  // Очищаємо форму\n  form.reset()\n}\n\n// Викликаємо функцію для заповнення форми при завантаженні сторінки.\n// Якщо в localStorage є збережені дані, вони будуть використані для заповнення форми.\npopulateForm()\n\n\n// Додаємо подію на форму, щоб відстежувати  і оновлювати дані в localStorage.\nform.addEventListener('input', handleFormInput)\n\n// Додаємо подію на форму\nform.addEventListener('submit', handleFormSubmit)"],"names":["formData","form","populateForm","savedData","parsedData","handleFormInput","event","name","value","handleFormSubmit"],"mappings":"wFAAA,MAAMA,EAAW,CAAE,MAAO,GAAI,QAAS,EAAI,EAErCC,EAAO,SAAS,cAAc,gBAAgB,EAG9CC,EAAe,IAAM,CAGzB,MAAMC,EAAY,aAAa,QAAQ,qBAAqB,EAE5D,GAAIA,EAAW,CACb,MAAMC,EAAa,KAAK,MAAMD,CAAS,EACvCH,EAAS,MAAQI,EAAW,OAAS,GACrCJ,EAAS,QAAUI,EAAW,SAAW,GAKzCH,EAAK,SAAS,MAAM,MAAQD,EAAS,OAAS,GAC9CC,EAAK,SAAS,QAAQ,MAAQD,EAAS,SAAW,EACnD,CACH,EAGMK,EAAkBC,GAAS,CAG/B,KAAM,CAAE,KAAAC,EAAM,MAAAC,GAAUF,EAAM,OAG9BN,EAASO,CAAI,EAAIC,EAAM,KAAI,EAG3B,aAAa,QAAQ,sBAAuB,KAAK,UAAUR,CAAQ,CAAC,CACtE,EAKMS,EAAmBH,GAAS,CAMhC,GAJAA,EAAM,eAAc,EAIhB,CAACN,EAAS,OAAS,CAACA,EAAS,QAAS,CACxC,MAAM,wBAAwB,EAC9B,MACD,CAED,QAAQ,IAAIA,CAAQ,EAGpB,aAAa,WAAW,qBAAqB,EAG7CA,EAAS,MAAQ,GACjBA,EAAS,QAAU,GAEnBC,EAAK,MAAO,CACd,EAIAC,EAAc,EAIdD,EAAK,iBAAiB,QAASI,CAAe,EAG9CJ,EAAK,iBAAiB,SAAUQ,CAAgB"}